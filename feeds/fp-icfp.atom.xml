<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joe Thomas - FP, ICFP</title><link href="https://jsthomas.github.io/" rel="alternate"></link><link href="https://jsthomas.github.io/feeds/fp-icfp.atom.xml" rel="self"></link><id>https://jsthomas.github.io/</id><updated>2021-08-30T00:00:00-04:00</updated><entry><title>Things I learned at ICFP 2021</title><link href="https://jsthomas.github.io/icfp-2021.html" rel="alternate"></link><published>2021-08-30T00:00:00-04:00</published><updated>2021-08-30T00:00:00-04:00</updated><author><name>Joe Thomas</name></author><id>tag:jsthomas.github.io,2021-08-30:/icfp-2021.html</id><summary type="html">&lt;p&gt;A summary of the sessions I attended at ICFP 2021&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I attended ICFP for the first time. Due to the pandemic, the
conference was entirely online. This made it really easy and
inexpensive to attend (were it in person, I would've had to fly to
Korea), but also made it harder to meet people and benefit from "the
hallway track".&lt;/p&gt;
&lt;p&gt;Despite the circumstances, there were a number of interesting
sessions. Below is a summary of some of the projects I learned about
at the conference. Some caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICFP has a lot of parallel tracks. I was focused primarily on ML and
  OCaml sessions, so I'm sure there were interesting talks that I
  missed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I missed some talks due to timezone issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm approaching the conference as someone who primarily works on the
  backend of analytics applications, so I wasn't as interested in new
  results about PL theory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think conferences are a great way to hear about new technologies,
but for depth you have to study on your own afterwards. As such, this
post is a bit of a "listicle" capturing topics I might want to
investigate later.&lt;/p&gt;
&lt;h1&gt;Keynote&lt;/h1&gt;
&lt;p&gt;Ravi Chugh gave an interesting keynote about how programming language
techniques can be applied to human-computer interaction problems. He
demonstrated a 2D graphics editor called Sketch-n-sketch where the
user could create an image using a GUI or a programming language, and
synchronize between the two.&lt;/p&gt;
&lt;p&gt;Before this session, I didn't realize how much research has been done
into applying FP/PL techniques to human/computer interfaces. It would
be interesting to apply similar techniques to a 3D animation system
like Blender. When I used to work on animation (long, long ago), I
wanted GUI capabilities for building individual models in a scene but
would have preferred a programming language when rigging characters or
automating certain motions. Debugging GUI-based automation was
no fun at all.&lt;/p&gt;
&lt;h1&gt;Historical Talks&lt;/h1&gt;
&lt;p&gt;Don Syme gave a talk about the history of F#. This covered the
original motivation for the language, it's interactions with the C#
community, and the impact of Object Orient Programming's popularity on
PL research. Xavier Leroy gave a presentation about the history of
OCaml (this year was the language's 25th anniversary), and also
commented on the impact of OO. It was interesting to hear about how
OCaml was used for teaching programming in Universities and how this
language related to research in automated theorem proving.&lt;/p&gt;
&lt;h1&gt;Research and Industry Talks&lt;/h1&gt;
&lt;p&gt;Marten Agren gave a talk about how Standard Chartered uses a strict
version of Haskell for their work, and how FP is especially suited to
scalable inter-operation with spreadsheets. Before this talk, I didn't
know that some people use Haskell without lazy evaluation.&lt;/p&gt;
&lt;p&gt;Denis Merigoux gave a &lt;a href="https://youtu.be/jmHwAh_-IOU"&gt;presentation&lt;/a&gt;
about a new DSL called &lt;a href="https://github.com/CatalaLang"&gt;Catala&lt;/a&gt; that
makes it possible to model laws (e.g. tax law) with code. The compiler
for the language is written in OCaml. Naturally, the correctness of
these types of systems is quite important; errors mean that essential
social services aren't delivered (e.g. paychecks for government
workers). It's interesting to think about other areas where this work
could be applied beyond tax law. For example, most utility costs are
also a matter of public record and having an open, formally verified
system for calculating those costs would help ensure rate payers are
billed fairly.&lt;/p&gt;
&lt;h2&gt;Talks about tooling and libraries&lt;/h2&gt;
&lt;p&gt;The OCaml workshop featured several exciting talks about improvements
to the OCaml ecosystem.&lt;/p&gt;
&lt;p&gt;Laurent Mazare spoke about how Jane Street makes OCaml libraries
accessible from within python, with a special focus on Jupyter
notebooks. As someone who has worked supporting data scientists in the
past, this seems like a great way to get the benefits of the Python
data science ecosystem while building primarily in a strongly typed
language. I'm not sure what this work means for projects like Owl that
try to provide a similar feature set as Numpy/SciPy/Pandas in OCaml.&lt;/p&gt;
&lt;p&gt;Di Long Li and Gabriel Radanne presented a new library called
&lt;a href="https://github.com/daypack-dev/timere"&gt;&lt;code&gt;timere&lt;/code&gt;&lt;/a&gt; that makes it easier
to work with dates and times. The library simplifies solving
recurrence-rule problems like "tell me which Christmases fall on a
Wednesday from now on". I think this is a great development,
especially if you're building an application that works with time
series data from a business domain. Gabriel Radanne also presented
&lt;a href="https://github.com/Drup/dowsing"&gt;&lt;code&gt;dowsing&lt;/code&gt;&lt;/a&gt; a tool that allows the
user to search OCaml codebases using a type signature. This is a bit
like &lt;a href="https://hoogle.haskell.org/"&gt;hoogle&lt;/a&gt;, but the underlying
techniques used to enable search are quite different.&lt;/p&gt;
&lt;p&gt;Thomas Leonard gave an impressive talk about applying the new effect
system in multicore OCaml to the &lt;code&gt;angstrom&lt;/code&gt; library, demonstrating
performance on par with Rust. I think it will be exciting to start
using effects as they become available in the next year or two.&lt;/p&gt;
&lt;p&gt;Two different teams discussed their efforts to improve the state of
OCaml documentation, so that a site similar to
&lt;a href="https://hackage.haskell.org/"&gt;hackage&lt;/a&gt; could be generated directly
from OPAM. This seems like a great way to lower one of the barriers to
entry for maintainers and make OCaml documentation more consistent.&lt;/p&gt;
&lt;p&gt;Gargi Sharma presented work that a team at Tarides is doing on
&lt;a href="https://github.com/ocurrent/current-bench"&gt;&lt;code&gt;current-bench&lt;/code&gt;&lt;/a&gt;, a system
for analyzing benchmarking data that integrates with OCaml CI
systems. Using their tools, one can track trends in benchmark data
over time and identify builds that improved or degraded
performance. This system also provides a nice example of how to build
an analytics app using FP techniques. They use &lt;code&gt;rescript&lt;/code&gt; for their
frontend, &lt;code&gt;hasura&lt;/code&gt; to serve analytics results via GraphQL, and an
OCaml program for ingesting performance data into their database.&lt;/p&gt;
&lt;h1&gt;Takeaways&lt;/h1&gt;
&lt;p&gt;There was a lot of focus on "ecosystem tooling" at the OCaml workshop
and considerable excitement about the upcoming release of multicore
OCaml. I didn't hear much about work on the frontend (ReasonML,
Bucklescript, Rescript) or updates about applications of OCaml to
statistics/numerical computing. Possibly this was just a function of
the unusual pandemic environment or the nature of a conference with a
more academic focus. In any case, I'm excited to dive into some of
these new tools, and especially to start getting the benefits of
improved documentation and search capabilities for OCaml libraries.&lt;/p&gt;</content><category term="FP, ICFP"></category></entry></feed>